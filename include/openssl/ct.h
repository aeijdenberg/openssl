/* ct.h */
/*
 * Written by Adam Eijdenberg <adam.eijdenberg@gmail.com>
 */
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

#ifndef HEADER_SCT_H
# define HEADER_SCT_H

# include <openssl/ossl_typ.h>
# include <openssl/safestack.h>
# include <openssl/crypto.h>
# include <openssl/buffer.h>
# include <openssl/bio.h>
# include <openssl/err.h>

#ifdef    __cplusplus
extern "C" {
#endif

typedef struct signed_certificate_timestamp_st CTSCT;
DECLARE_STACK_OF(CTSCT)

/*
 * CT_POLICY_NONE - don't even request SCTs.
 * CT_POLICY_REQUEST - request SCTs - setting has side effect of requesting
 *               OCSP response (as SCTs can also be delivered in this manner).
 *               CT_get_peer_scts() will return them. Will fail the connection
 *               if there's an error, but does not require any SCTs be recognized.
 * CT_POLICY_REQUIRE_ONE - same as request, but fail if at least 1 SCT does not validate.
 */
typedef enum {CT_POLICY_NONE, CT_POLICY_REQUEST, CT_POLICY_REQUIRE_ONE} ct_policy;

/* Set/get CT policy */
int SSL_apply_certificate_transparency_policy(SSL *s, ct_policy policy);
int SSL_CTX_apply_certificate_transparency_policy(SSL_CTX *ctx, ct_policy policy);
ct_policy SSL_CTX_get_certificate_transparency_policy(SSL_CTX *ctx);

/* Get and print SCT objects */
const STACK_OF(CTSCT) *SSL_get_peer_scts(SSL *s);
void CT_print_sct(BIO *bio, const CTSCT *sct);

/*
 * Load JSON list of logs such as downloaded from:
 * http://www.certificate-transparency.org/known-logs
 */
int CTLOG_STORE_set_default_paths(SSL_CTX *ctx);
int CTLOG_STORE_load_file(SSL_CTX *ctx, char *fpath);



/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
void ERR_load_CT_strings(void);

/* Error codes for the CT functions. */

/* Function codes. */
# define CT_F_CTLOG_CREATE_LOG_FROM_JSON_FRAGMENT         100
# define CT_F_CTLOG_STORE_LOAD_FILE                       101
# define CT_F_CTLOG_WRITE_BIO                             102
# define CT_F_CTSCT_ALLOC                                 103
# define CT_F_CT_BASE64_DECODE                            104
# define CT_F_CT_BASE64_ENCODE                            105
# define CT_F_CT_JSON_COMPLETE_ARRAY                      106
# define CT_F_CT_JSON_COMPLETE_DICT                       107
# define CT_F_CT_PARSE_JSON                               108
# define CT_F_CT_PARSE_SCT                                109
# define CT_F_CT_PARSE_SCT_BIO                            110
# define CT_F_CT_PARSE_SCT_LIST                           111
# define CT_F_CT_PARSE_SCT_LIST_FROM_X509_EXTENSION       112
# define CT_F_CT_SERVER_INFO_ENCODE_SCT_LIST_BIO          113
# define CT_F_CT_TLS_ENCODE_SCT_BIO                       114
# define CT_F_CT_TLS_ENCODE_SCT_LIST_BIO                  115
# define CT_F_CT_VALIDATE_CONNECTION                      116
# define CT_F_CT_VALIDATE_SCT                             117
# define CT_F_CT_VALIDATE_SIGNATURE                       118
# define CT_F_SSL_APPLY_CERTIFICATE_TRANSPARENCY_POLICY   119
# define CT_F_SSL_CTX_APPLY_CERTIFICATE_TRANSPARENCY_POLICY 120
# define CT_F_SSL_GET_PEER_SCTS                           121

/* Reason codes. */
# define CT_R_BAD_WRITE                                   100
# define CT_R_CT_JSON_PARSE_ERROR                         101
# define CT_R_CT_JSON_PARSE_MORE_THAN_ONE_OBJECT          102
# define CT_R_CT_JSON_PARSE_UNICODE_NOT_SUPPORTED         103
# define CT_R_CUSTOM_EXT_HANDLER_ALREADY_INSTALLED        104
# define CT_R_ENCODE_ERROR                                105
# define CT_R_ENCODE_FAILURE                              106
# define CT_R_LOG_ERROR                                   107
# define CT_R_MEM_ERR                                     108
# define CT_R_NOT_ENOUGH_SCTS                             109
# define CT_R_NULL_INPUT                                  110
# define CT_R_SCT_DIGEST_VERIFY_ERROR                     111
# define CT_R_SCT_LIST_INVALID_SCT                        112
# define CT_R_SCT_LIST_MALLOC_FAILED                      113
# define CT_R_SCT_LIST_UNEXPECTED_EOF                     114
# define CT_R_SCT_MALLOC_FAILED                           115
# define CT_R_SCT_UNEXPECTED_EOF                          116
# define CT_R_SCT_UNRECOGNIZED_EXTENSION                  117
# define CT_R_SCT_UNRECOGNIZED_HASH_ALGORITHM             118
# define CT_R_SCT_UNRECOGNIZED_SIGNATURE_ALGORITHM        119
# define CT_R_SCT_UNRECOGNIZED_VERSION                    120
# define CT_R_X509V3_INVALID_EXTENSION                    121
# define CT_R_X509_ERROR                                  122

#ifdef  __cplusplus
}
#endif
#endif
